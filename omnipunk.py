
import discord
import os
import datetime
from datetime import datetime as dt
from asyncio import sleep as s
import aiohttp
import discord
import warnings
from discord.ext import commands

warnings.filterwarnings("ignore", category=DeprecationWarning)
intents = discord.Intents.default()
intents.members = True
intents.message_content = True


bot = commands.Bot(command_prefix=commands.when_mentioned_or("."),
                   intents=intents)

bot.session = aiohttp.ClientSession()
bot.remove_command('help')

day = dt.now()

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user} (ID: {bot.user.id})')
    print('------')
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching,name=f'{len(bot.guilds)} servers | {len(bot.users)} users | Type ?help or tag me with help for commands'))


@bot.command()
async def gotcha(ctx):
  """Destinys Qoute"""
  await ctx.send('Anything Else?')


@bot.command()
async def test1(ctx):
  """My Jokes"""
  await ctx.send(
    'I cant wait to see what cosmic horrors i will face in NeoPunkFMs Discord')


@bot.command()
async def help(ctx, member: discord.Member,):
    hlpembed=discord.Embed(title="Help Menu", colour=discord.Colour.blue())
    hlpembed.add_field(name="mute", value="Mutes users for specified amount of time (a Reason is Required)", inline=False)
    hlpembed.add_field(name="ex:", value=" .mute @you 10 lame-ass user", inline=False)
    hlpembed.add_field(name="clr", value="This clears the chat the command is run in. limit is 10,000",
                       inline=False)
    hlpembed.add_field(name="ex:", value=" .clr 100", inline=False)
    await member.send(hlpembed)
    await ctx.send(f"Successfully sent message to {member}.")


@bot.command()
async def clr(ctx, num: int = 10):
  if num > 10000 or num < 0:
    await ctx.send(f"**❌ Invalid Amount Maximum 500**")
  else:
    await ctx.channel.purge(limit=num)
    await ctx.send(f"**Sucsses Delete `{num}` message**")

@bot.command()
async def userinfo(ctx: commands.Context, user: discord.User):
    # In the command signature above, you can see that the `user`
    # parameter is typehinted to `discord.User`. This means that
    # during command invocation we will attempt to convert
    # the value passed as `user` to a `discord.User` instance.
    # The documentation notes what can be converted, in the case of `discord.User`
    # you pass an ID, mention or username (discrim optional)
    # E.g. 80088516616269824, @Danny or Danny#0007

    # NOTE: typehinting acts as a converter within the `commands` framework only.
    # In standard Python, it is use for documentation and IDE assistance purposes.

    # If the conversion is successful, we will have a `discord.User` instance
    # and can do the following:
    user_id = user.id
    username = user.name
    avatar = user.display_avatar.url
    await ctx.send(f'User found: {user_id} -- {username}\n{avatar}')

@bot.command(description="Mutes the specified user.")
async def mute(ctx, member: discord.Member, time : int, *, reason=None):
    guild = ctx.guild
    mutedRole = discord.utils.get(guild.roles, name="Muted")
    if not mutedRole:
        mutedRole = await guild.create_role(name="Muted")

        for channel in guild.channels:
            await channel.set_permissions(mutedRole, speak=False, send_messages=False, read_message_history=True, read_messages=False)
    embed = discord.Embed(title="Mute Report", description=f"{member.mention} was muted for {time} Hours ",
                          colour=discord.Colour.blue())
    embed.set_thumbnail(url=member.avatar)
    embed.add_field(name="Report Generated by :", value=f"{ctx.message.author.mention}", inline=False)
    embed.add_field(name="Actual Mute Duration :", value=f"{time*60} Minutes", inline=False)
    embed.add_field(name="reason:", value=reason, inline=False)
    embed.set_footer(text="Bot Coded by fate")
    await bot.get_channel(1091778467382706318).send(embed=embed)
    await member.add_roles(mutedRole, reason=reason)
    await member.send(f" you have been muted from: {guild.name} for {time} hour(s)\n reason: {reason}. If this mute goes over 1day contact kismet#0005")
    await ctx.message.delete()
    await s(time*60)
    await member.remove_roles(mutedRole)


@bot.command(description="Mutes the specified user.")
async def unmute(ctx, member: discord.Member):
    guild = ctx.guild
    mutedRole = discord.utils.get(guild.roles, name="Muted")
    if mutedRole in member.roles:
        await member.remove_roles(mutedRole)
        await ctx.message.delete()
        await bot.get_channel(1091778467382706318).send(f"You have unmuted {member.mention} from: {guild.name}")
    else:
        await ctx.message.delete()
        await ctx.send(f"{member.mention} was never even muted, goofy!!!1")
@bot.command()

async def announcement(ctx):

    # Find a channel from the guilds `text channels` (Rather then voice channels)

    # with the name announcements

    channel = discord.utils.get(ctx.guild.text_channels, name="announcements")

    if channel: # If a channel exists with the name

                embed = discord.Embed(color=discord.Color.blue(), timestamp=ctx.message.created_at)

                embed.set_author(name="Announcement", icon_url=self.client.user.avatar_url)

                embed.add_field(name=f"Sent by {ctx.message.author}", value=str(message), inline=False)

                embed.set_thumbnail(url=self.client.user.avatar_url)

                embed.set_footer(text=self.client.user.name, icon_url=self.client.user.avatar_url)

                await ctx.message.add_reaction(emoji="✅")

                await channel.send(embed=embed)


@bot.event
async def on_command_error(ctx, error):
    await ctx.send(f"Hey you know that a: '{str(error)}'")

bot.run("TOKEN HERE")
